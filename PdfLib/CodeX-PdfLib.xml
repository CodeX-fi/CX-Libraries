<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeX-PdfLib</name>
    </assembly>
    <members>
        <member name="T:CX.PdfLib.Common.Bookmark">
            <summary>
            Base class for bookmarks
            </summary>
        </member>
        <member name="P:CX.PdfLib.Common.Bookmark.Title">
            <summary>
            The title of the bookmark
            </summary>
        </member>
        <member name="P:CX.PdfLib.Common.Bookmark.Pages">
            <summary>
            Number of the page where the bookmarks starts at
            </summary>
        </member>
        <member name="M:CX.PdfLib.Common.Bookmark.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new bookmark
            </summary>
            <param name="title">Name of the bookmark</param>
            <param name="startPage">Page number for starting point</param>
            <param name="pageCount">Number of pages included in the bookmark's range</param>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="pageCount"/> is negative.</exception>
        </member>
        <member name="T:CX.PdfLib.Common.LeveledBookmark">
            <summary>
            A class for bookmarks categorised by their level
            </summary>
        </member>
        <member name="P:CX.PdfLib.Common.LeveledBookmark.Level">
            <summary>
            Level of the bookmark in the bookmark tree (1 leftmost)
            </summary>
        </member>
        <member name="M:CX.PdfLib.Common.LeveledBookmark.#ctor(System.Int32,System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Create info on leveled bookmark
            </summary>
            <param name="level">Bookmark level in the bookmark tree</param>
            <param name="title">Title of the bookmark</param>
            <param name="pages">Pages contained in the bookmark</param>
        </member>
        <member name="M:CX.PdfLib.Common.LeveledBookmark.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Create info on leveled bookmark
            </summary>
            <param name="level">Bookmark level in the bookmark tree</param>
            <param name="title">Title of the bookmark</param>
            <param name="startPage">Start page for bookmarks</param>
            <param name="pageCount">Number of pages in the range. Throws <see cref="T:System.ArgumentException"/>
            if <paramref name="pageCount"/> is negative.</param>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="pageCount"/> is negative.</exception>
        </member>
        <member name="T:CX.PdfLib.Common.MergeInput">
            <summary>
            Default implementation for <see cref="T:CX.PdfLib.Services.Data.IMergeInput"/>
            </summary>
        </member>
        <member name="T:CX.PdfLib.Common.ProgressReport">
            <summary>
            Class for reporting progress of a task
            </summary>
        </member>
        <member name="M:CX.PdfLib.Extensions.BookmarkExtensions.AdjustLevels(System.Collections.Generic.IEnumerable{CX.PdfLib.Services.Data.ILeveledBookmark},System.Int32)">
            <summary>
            Adjust the level of all bookmarks in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="originals"></param>
            <param name="adjustment">Amount to adjust (positive or negative)</param>
            <remarks>Bookmark level cannot be lower than 1. Bookmarks will be adjusted
            to level 1, if adjustment would bring it lower. This can be used to level all
            bookmarks to level 1.</remarks>
            <returns></returns>
        </member>
        <member name="T:CX.PdfLib.Services.Data.IBookmark">
            <summary>
            Generic bookmark service
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IBookmark.Title">
            <summary>
            Name of the bookmark
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IBookmark.Pages">
            <summary>
            Pages contained in the bookmark
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IBookmark.StartPage">
            <summary>
            Get first page (i.e. destination)
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IBookmark.EndPage">
            <summary>
            Get last page
            </summary>
        </member>
        <member name="T:CX.PdfLib.Services.Data.ILeveledBookmark">
            <summary>
            A bookmark in a tree hierarchy
            </summary>
        </member>
        <member name="T:CX.PdfLib.Services.Data.ILeveledItem">
            <summary>
            An object that has a property indicating its level in a hierarchy
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.ILeveledItem.Level">
            <summary>
            Level of the item in the hierarchy
            </summary>
        </member>
        <member name="T:CX.PdfLib.Services.Data.IMergeInput">
            <summary>
            Info on a file or title to be used in a document merge
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IMergeInput.FilePath">
            <summary>
            Path to the file to merge. Null, if just a title.
            </summary>
        </member>
        <member name="P:CX.PdfLib.Services.Data.IMergeInput.Title">
            <summary>
            Title of the bookmark to add
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.IBookmarkService.FindBookmarks(System.String)">
            <summary>
            Get leveled bookmarks from a document
            </summary>
            <param name="sourcePdf">Document to get the bookmarks from</param>
            <returns>A list of bookmarks</returns>
        </member>
        <member name="M:CX.PdfLib.Services.IBookmarkService.AddBookmarks(System.Collections.Generic.IList{CX.PdfLib.Services.Data.ILeveledBookmark},System.String)">
            <summary>
            Insert leveled bookmarks into a document
            </summary>
            <param name="bookmarks">Bookmarks to add</param>
            <param name="documentPath">The pdf to add the bookmarks to</param>
        </member>
        <member name="T:CX.PdfLib.Services.IExtractionService">
            <summary>
            Extract pages from a pdf
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.IExtractionService.Extract(CX.PdfLib.Common.ExtractionOptions)">
            <summary>
            Extract bookmarks from documents into one or more new documents
            </summary>
            <param name="options">Options for extraction</param>
            <returns>A list of extracted files</returns>
        </member>
        <member name="T:CX.PdfLib.Services.IMergingService">
            <summary>
            Service for merging pdf-files into one
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.IMergingService.Merge(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Merge pdf documents into one document
            </summary>
            <param name="sourcePaths">Source files in order of merging</param>
            <param name="outputPath">Output file path</param>
            <returns>Merged documents' start pages in the new document</returns>
        </member>
        <member name="M:CX.PdfLib.Services.IMergingService.Merge(System.Collections.Generic.IList{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Merge pdf documents into one document
            </summary>
            <param name="sourcePaths">Source files in order of merging</param>
            <param name="outputPath">Output file path</param>
            <param name="token">Token for method cancellation</param>
            <returns>Merged documents' start pages in the new document</returns>
        </member>
        <member name="M:CX.PdfLib.Services.IMergingService.MergeWithOptions(CX.PdfLib.Common.MergingOptions)">
            <summary>
            Merge pdf documents into one document using provided options
            </summary>
            <param name="options">Options for merging</param>
            <returns>Files that were created</returns>
        </member>
        <member name="T:CX.PdfLib.Services.IPdfAConvertService">
            <summary>
            Convert a regular pdf into pdf/a
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.IPdfAConvertService.Convert(System.IO.FileSystemInfo,System.IO.DirectoryInfo,System.Threading.CancellationToken)">
            <summary>
            Convert to pdf/a
            </summary>
            <param name="source">File or folder</param>
            <param name="destinationDirectory"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:CX.PdfLib.Services.ISigningService">
            <summary>
            Service for manipulating digital signatures
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.ISigningService.RemoveSignature(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Remove digital signatures from a document.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:CX.PdfLib.Services.ISigningService.RemoveSignature(System.IO.FileInfo,System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Remove digital signatures from a document.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="token"></param>
        </member>
        <member name="T:CX.PdfLib.Services.IWordConvertService">
            <summary>
            Convert files to pdf
            </summary>
        </member>
        <member name="M:CX.PdfLib.Services.IWordConvertService.Convert(System.String,System.String)">
            <summary>
            Convert a single document
            </summary>
            <param name="filePath">Path to the document to convert</param>
            <param name="outputDirectory">Directory to save document in</param>
            <returns>Path to the converted document</returns>
            <remarks>The newly created document will be saved with the same name as the
            original file (with extension .pdf)</remarks>
        </member>
        <member name="M:CX.PdfLib.Services.IWordConvertService.Convert(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Convert a single document asynchronously
            </summary>
            <param name="filePath">Path to the document to convert</param>
            <param name="outputDirectory">Directory to save document in</param>
            <param name="token">Token for method cancellation</param>
            <returns>Path to the converted document</returns>
            <remarks>The newly created document will be saved with the same name as the
            original file (with extension .pdf)</remarks>
        </member>
        <member name="M:CX.PdfLib.Services.IWordConvertService.Convert(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Convert multiple documents
            </summary>
            <param name="filePaths">Documents to convert</param>
            <param name="outputDirectory">Directory to save the documents in</param>
            <returns>Paths to converted documents</returns>
            // <remarks>Newly created documents will be saved with the same name as the
            original files (with extension .pdf)</remarks>
        </member>
        <member name="M:CX.PdfLib.Services.IWordConvertService.Convert(System.Collections.Generic.IList{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Convert multiple documents asynchronously
            </summary>
            <param name="filePaths">Documents to convert</param>
            <param name="outputDirectory">Directory to save the documents in</param>
            <param name="token">Token for method cancellation</param>
            <returns>Paths to converted documents</returns>
            // <remarks>Newly created documents will be saved with the same name as the
            original files (with extension .pdf)</remarks>
        </member>
    </members>
</doc>
